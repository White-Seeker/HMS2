{"ast":null,"code":"var _jsxFileName = \"/Users/sherlock/Desktop/reactapp/client/src/pages/noticeBoard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport jwt from 'jsonwebtoken';\nimport { useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Noticeboard() {\n  _s();\n\n  const [notice, setNotice] = useState('');\n  const [tempNotice, settempNotice] = useState('');\n\n  async function populateQuote() {\n    const req = await fetch('http://localhost:1337/api/notice', {\n      headers: {\n        'x-access-token': localStorage.getItem('token')\n      }\n    });\n    const data = await req.json();\n\n    if (data.status === 'ok') {\n      setNotice(data.quote);\n    } else {\n      alert(data.error);\n    }\n  }\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n\n    if (token) {\n      const user = jwt.decode(token);\n\n      if (!user) {\n        localStorage.removeItem('token');\n      } else {\n        populateQuote();\n      }\n    }\n  }, []);\n\n  async function updateQuote(event) {\n    event.preventDefault();\n    const req = await fetch('http://localhost:1337/api/notice', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-access-token': localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        notice: tempNotice\n      })\n    });\n    const data = await req.json();\n\n    if (data.status === 'ok') {\n      setQuote(tempQuote);\n      setTempQuote('');\n    } else {\n      alert(data.error);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n      children: \"Hostel Notice Board\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Your quote: \", notice || 'No quote found']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Noticeboard, \"JpvTZsxcQkxXkPI+PbLWnvvmiQ4=\");\n\n_c = Noticeboard;\nexport default Noticeboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Noticeboard\");","map":{"version":3,"sources":["/Users/sherlock/Desktop/reactapp/client/src/pages/noticeBoard.js"],"names":["React","useEffect","useState","jwt","useHistory","Noticeboard","notice","setNotice","tempNotice","settempNotice","populateQuote","req","fetch","headers","localStorage","getItem","data","json","status","quote","alert","error","token","user","decode","removeItem","updateQuote","event","preventDefault","method","body","JSON","stringify","setQuote","tempQuote","setTempQuote"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,SAASC,UAAT,QAA2B,kBAA3B;;;AAEA,SAASC,WAAT,GAAsB;AAAA;;AAClB,QAAM,CAACC,MAAD,EAAQC,SAAR,IAAqBL,QAAQ,CAAC,EAAD,CAAnC;AACA,QAAM,CAACM,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,EAAD,CAA5C;;AACA,iBAAeQ,aAAf,GAA+B;AACjC,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,kCAAD,EAAqC;AAC3DC,MAAAA,OAAO,EAAE;AACR,0BAAkBC,YAAY,CAACC,OAAb,CAAqB,OAArB;AADV;AADkD,KAArC,CAAvB;AAMA,UAAMC,IAAI,GAAG,MAAML,GAAG,CAACM,IAAJ,EAAnB;;AACA,QAAID,IAAI,CAACE,MAAL,KAAgB,IAApB,EAA0B;AACzBX,MAAAA,SAAS,CAACS,IAAI,CAACG,KAAN,CAAT;AACA,KAFD,MAEO;AACNC,MAAAA,KAAK,CAACJ,IAAI,CAACK,KAAN,CAAL;AACA;AACD;;AAEEpB,EAAAA,SAAS,CAAC,MAAM;AAClB,UAAMqB,KAAK,GAAGR,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;;AACA,QAAIO,KAAJ,EAAW;AACV,YAAMC,IAAI,GAAGpB,GAAG,CAACqB,MAAJ,CAAWF,KAAX,CAAb;;AACA,UAAI,CAACC,IAAL,EAAW;AACVT,QAAAA,YAAY,CAACW,UAAb,CAAwB,OAAxB;AACA,OAFD,MAEO;AACNf,QAAAA,aAAa;AACb;AACD;AACD,GAVW,EAUT,EAVS,CAAT;;AAYA,iBAAegB,WAAf,CAA2BC,KAA3B,EAAkC;AACpCA,IAAAA,KAAK,CAACC,cAAN;AAEA,UAAMjB,GAAG,GAAG,MAAMC,KAAK,CAAC,kCAAD,EAAqC;AAC3DiB,MAAAA,MAAM,EAAE,MADmD;AAE3DhB,MAAAA,OAAO,EAAE;AACR,wBAAgB,kBADR;AAER,0BAAkBC,YAAY,CAACC,OAAb,CAAqB,OAArB;AAFV,OAFkD;AAM3De,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACpB1B,QAAAA,MAAM,EAAEE;AADY,OAAf;AANqD,KAArC,CAAvB;AAWA,UAAMQ,IAAI,GAAG,MAAML,GAAG,CAACM,IAAJ,EAAnB;;AACA,QAAID,IAAI,CAACE,MAAL,KAAgB,IAApB,EAA0B;AACzBe,MAAAA,QAAQ,CAACC,SAAD,CAAR;AACAC,MAAAA,YAAY,CAAC,EAAD,CAAZ;AACA,KAHD,MAGO;AACNf,MAAAA,KAAK,CAACJ,IAAI,CAACK,KAAN,CAAL;AACA;AACD;;AAGE,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAGA;AAAA,iCAAiBf,MAAM,IAAI,gBAA3B;AAAA;AAAA;AAAA;AAAA;AAAA,YAHA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;GA7DQD,W;;KAAAA,W;AA+DT,eAAeA,WAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport jwt from 'jsonwebtoken'\nimport { useHistory } from 'react-router-dom'\n\nfunction Noticeboard(){\n    const [notice,setNotice] = useState('')\n    const [tempNotice, settempNotice] = useState('')\n    async function populateQuote() {\n\t\tconst req = await fetch('http://localhost:1337/api/notice', {\n\t\t\theaders: {\n\t\t\t\t'x-access-token': localStorage.getItem('token'),\n\t\t\t},\n\t\t})\n\n\t\tconst data = await req.json()\n\t\tif (data.status === 'ok') {\n\t\t\tsetNotice(data.quote)\n\t\t} else {\n\t\t\talert(data.error)\n\t\t}\n\t}\n\n    useEffect(() => {\n\t\tconst token = localStorage.getItem('token')\n\t\tif (token) {\n\t\t\tconst user = jwt.decode(token)\n\t\t\tif (!user) {\n\t\t\t\tlocalStorage.removeItem('token')\n\t\t\t} else {\n\t\t\t\tpopulateQuote()\n\t\t\t}\n\t\t}\n\t}, [])\n\n    async function updateQuote(event) {\n\t\tevent.preventDefault()\n\n\t\tconst req = await fetch('http://localhost:1337/api/notice', {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t'x-access-token': localStorage.getItem('token'),\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tnotice: tempNotice,\n\t\t\t}),\n\t\t})\n\n\t\tconst data = await req.json()\n\t\tif (data.status === 'ok') {\n\t\t\tsetQuote(tempQuote)\n\t\t\tsetTempQuote('')\n\t\t} else {\n\t\t\talert(data.error)\n\t\t}\n\t}\n\n\n    return(\n        <div>\n            <h5>Hostel Notice Board</h5>\n\n        <h1>Your quote: {notice || 'No quote found'}</h1>\n        </div>\n    )\n}\n\nexport default Noticeboard"]},"metadata":{},"sourceType":"module"}